import { useContext, useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { motion, useTransform } from 'framer-motion';
import { ScrollContext } from '../App'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ ScrollContext –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

const PostPreview = ({ post, getImageUrl, index }) => {
  const imgRef = useRef(null); // –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏
  const [start, setStart] = useState(0); // –ù–∞—á–∞–ª–æ –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞
  const [end, setEnd] = useState(0); // –ö–æ–Ω–µ—Ü –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞
  const { scrollY } = useContext(ScrollContext); // –ü–æ–ª—É—á–∞–µ–º scrollY –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

  // –í—ã—á–∏—Å–ª—è–µ–º start –∏ end –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
  useEffect(() => {
    const updatePositions = () => {
      if (imgRef.current) {
        const rect = imgRef.current.getBoundingClientRect();
        const scrollTop = scrollY.get(); // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞
        const viewportHeight = window.innerHeight;

        // –ü–æ–∑–∏—Ü–∏—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const imgTop = rect.top + scrollTop;
        // –ü–æ–∑–∏—Ü–∏—è –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        const imgBottom = imgTop + rect.height;

        // Start: –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤—Ö–æ–¥–∏—Ç –≤ –∑–æ–Ω—É –≤–∏–¥–∏–º–æ—Å—Ç–∏
        setStart(imgTop - viewportHeight);
        // End: –∫–æ–≥–¥–∞ –Ω–∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
        setEnd(imgBottom);
      }
    };

    updatePositions(); // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.addEventListener('resize', updatePositions); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    return () => window.removeEventListener('resize', updatePositions); // –ß–∏—Å—Ç–∏–º —Å–ª—É—à–∞—Ç–µ–ª—å
  }, [scrollY]);

  // –ü–∞—Ä–∞–ª–ª–∞–∫—Å: —Å–¥–≤–∏–≥ –æ—Ç 0 –¥–æ 50px –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ start –¥–æ end
  const parallaxY = useTransform(scrollY, [start, end], [0, 80]);

  return (
    <motion.div className="post__preview"
    initial={{ opacity: 0, x: index % 2 === 0 ? -100 : 100}}
    whileInView={{ opacity: 1, x: 0}}
    >
      <div className='post__preview--top'>
        <div className="post__preview--wrapper">
          <motion.img
            loading="lazy"
            ref={imgRef} // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–µ—Ñ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            className="post__preview--img"
            src={getImageUrl(post)}
            alt={post.title.rendered || '–ü–æ—Å—Ç'}
            style={{ y: parallaxY }} // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–∞–∫—Å
          />
        </div>
        <Link to={`/post/${post.id}`}>
          <h2
            className="post__preview--heading"
            dangerouslySetInnerHTML={{ __html: post.title.rendered }}
          />
          <p
            className="post__preview--descr"
            dangerouslySetInnerHTML={{ __html: post.excerpt.rendered }}
          />
        </Link>
      </div>
      <div className="post__preview--additional">
        <div className="button__additional">{post.acf.cooperation}</div>
        <div className="button__additional">{post.acf.role}</div>
      </div>
      <a
        className="post__preview--href"
        href={post.acf.link}
        rel="noreferrer"
        target="_blank"
      >
        <p>–ù–∞ —Å–∞–π—Ç</p><span>ü°•</span>
      </a>
    </motion.div>
  );
};

export default PostPreview;